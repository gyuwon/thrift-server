//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./my-service_types');
//HELPER FUNCTIONS AND STRUCTURES

ContactsService_getContacts_args = function(args) {
};
ContactsService_getContacts_args.prototype = {};
ContactsService_getContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactsService_getContacts_args.prototype.write = function(output) {
  output.writeStructBegin('ContactsService_getContacts_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContactsService_getContacts_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ContactsService_getContacts_result.prototype = {};
ContactsService_getContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Contact();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactsService_getContacts_result.prototype.write = function(output) {
  output.writeStructBegin('ContactsService_getContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContactsServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
ContactsServiceClient.prototype = {};
ContactsServiceClient.prototype.getContacts = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getContacts();
};

ContactsServiceClient.prototype.send_getContacts = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContacts', Thrift.MessageType.CALL, this.seqid);
  var args = new ContactsService_getContacts_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ContactsServiceClient.prototype.recv_getContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContactsService_getContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContacts failed: unknown result');
};
ContactsServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ContactsServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ContactsServiceProcessor.prototype.process_getContacts = function(seqid, input, output) {
  var args = new ContactsService_getContacts_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getContacts(function (err, result) {
    var result = new ContactsService_getContacts_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getContacts", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

